import crc from '../crc';

import { IUSBCommand } from './state';

export const mockUSBCommand = (command = 1, subcommand = 0, payload: Uint8Array): IUSBCommand => {
  const protocol = 1;
  const checksum = (
    '0000' + crc([command, subcommand, ...payload].slice(0, 126)).toString(16)
  ).substr(-4);

  return {
    protocol,
    command,
    subcommand,
    payload,
    checksum,
  };
};

// NOTE: all text in b64
const mockedDTC = [
  //P06010
  mockUSBCommand(3, 0, new Uint8Array([0x55, 0x44, 0x41, 0x32, 0x4d, 0x44, 0x45, 0x3d])),
  //P060A // 55 44 41 32 4d 45 45 3d
  mockUSBCommand(3, 0, new Uint8Array([0x55, 0x44, 0x41, 0x32, 0x4d, 0x45, 0x45, 0x3d])),
  //P0632 // 55 44 41 32 4d 7a 49 4b
  mockUSBCommand(3, 0, new Uint8Array([0x55, 0x44, 0x41, 0x32, 0x4d, 0x7a, 0x49, 0x4b])),
  //P0648 // 55 44 41 32 4e 44 67 3d
  mockUSBCommand(3, 0, new Uint8Array([0x55, 0x44, 0x41, 0x32, 0x4e, 0x44, 0x67, 0x3d])),
  //P06420 // 55 44 41 32 4e 44 49 3d
  mockUSBCommand(3, 0, new Uint8Array([0x55, 0x44, 0x41, 0x32, 0x4e, 0x44, 0x49, 0x3d])),
];

// NOTE: 1 command => 1 row, all values * 100, 16b int signed
const mockedIgnition = [
  // [ 00 ]  [550 ] [ 950] [1200] [1650] [2200] [2800] [3400] [3900] [4400] [4900] [5400] [7200]
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0x0, 0x0, 0x0, 0x0, 0xd8, 0xd6, 0x0, 0x0, 0x18, 0x73, 0x1, 0x0, 0xc0, 0xd4, 0x1, 0x0, 0x88,
      0x84, 0x2, 0x0, 0x60, 0x5b, 0x3, 0x0, 0xc0, 0x45, 0x4, 0x0, 0x20, 0x30, 0x5, 0x0, 0x70, 0xf3,
      0x5, 0x0, 0xc0, 0xb6, 0x6, 0x0, 0x10, 0x7a, 0x7, 0x0, 0x60, 0x3d, 0x8, 0x0, 0x80, 0xfc, 0xa,
      0x0,
    ])
  ),
  // [ 100]  (13.5) (13.0) (14.0) (14.0) (18.6) (24.0) (31.0) (33.0) (33.2) (33.4) (33.6) (34.3)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0x10, 0x27, 0x0, 0x0, 0xbc, 0x34, 0x0, 0x0, 0xc8, 0x32, 0x0, 0x0, 0xb0, 0x36, 0x0, 0x0, 0xb0,
      0x36, 0x0, 0x0, 0xa8, 0x48, 0x0, 0x0, 0xc0, 0x5d, 0x0, 0x0, 0x18, 0x79, 0x0, 0x0, 0xe8, 0x80,
      0x0, 0x0, 0xb0, 0x81, 0x0, 0x0, 0x78, 0x82, 0x0, 0x0, 0x40, 0x83, 0x0, 0x0, 0xfc, 0x85, 0x0,
      0x0,
    ])
  ),
  // [ 90 ]  (13.8) (13.3) (14.0) (14.2) (17.4) (24.5) (31.2) (33.3) (33.6) (33.8) (34.1) (34.9)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0x28, 0x23, 0x0, 0x0, 0xe8, 0x35, 0x0, 0x0, 0xf4, 0x33, 0x0, 0x0, 0xb0, 0x36, 0x0, 0x0, 0x78,
      0x37, 0x0, 0x0, 0xf8, 0x43, 0x0, 0x0, 0xb4, 0x5f, 0x0, 0x0, 0xe0, 0x79, 0x0, 0x0, 0x14, 0x82,
      0x0, 0x0, 0x40, 0x83, 0x0, 0x0, 0x8, 0x84, 0x0, 0x0, 0x34, 0x85, 0x0, 0x0, 0x54, 0x88, 0x0,
      0x0,
    ])
  ),
  // [ 80 ]  (14.2) (13.6) (13.9) (14.4) (17.8) (25.0) (31.5) (33.7) (34.0) (34.2) (34.5) (35.5)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0x40, 0x1f, 0x0, 0x0, 0x78, 0x37, 0x0, 0x0, 0x20, 0x35, 0x0, 0x0, 0x4c, 0x36, 0x0, 0x0, 0x40,
      0x38, 0x0, 0x0, 0x88, 0x45, 0x0, 0x0, 0xa8, 0x61, 0x0, 0x0, 0xc, 0x7b, 0x0, 0x0, 0xa4, 0x83,
      0x0, 0x0, 0xd0, 0x84, 0x0, 0x0, 0x98, 0x85, 0x0, 0x0, 0xc4, 0x86, 0x0, 0x0, 0xac, 0x8a, 0x0,
      0x0,
    ])
  ),
  // [ 70 ]  (14.5) (13.9) (13.9) (14.6) (18.3) (25.5) (31.7) (34.0) (34.4) (34.7) (35.0) (36.1)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0x58, 0x1b, 0x0, 0x0, 0xa4, 0x38, 0x0, 0x0, 0x4c, 0x36, 0x0, 0x0, 0x4c, 0x36, 0x0, 0x0, 0x8,
      0x39, 0x0, 0x0, 0x7c, 0x47, 0x0, 0x0, 0x9c, 0x63, 0x0, 0x0, 0xd4, 0x7b, 0x0, 0x0, 0xd0, 0x84,
      0x0, 0x0, 0x60, 0x86, 0x0, 0x0, 0x8c, 0x87, 0x0, 0x0, 0xb8, 0x88, 0x0, 0x0, 0x4, 0x8d, 0x0,
      0x0,
    ])
  ),
  // [ 60 ]  (14.9) (14.2) (13.8) (14.8) (18.7) (25.9) (32.0) (34.4) (34.7) (35.1) (35.4) (36.7)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0x70, 0x17, 0x0, 0x0, 0x34, 0x3a, 0x0, 0x0, 0x78, 0x37, 0x0, 0x0, 0xe8, 0x35, 0x0, 0x0, 0xd0,
      0x39, 0x0, 0x0, 0xc, 0x49, 0x0, 0x0, 0x2c, 0x65, 0x0, 0x0, 0x0, 0x7d, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0x8c, 0x87, 0x0, 0x0, 0x1c, 0x89, 0x0, 0x0, 0x48, 0x8a, 0x0, 0x0, 0x5c, 0x8f, 0x0,
      0x0,
    ])
  ),
  //[ 50 ]  (15.3) (14.5) (13.8) (15.0) (19.1) (26.4) (32.2) (34.4) (35.1) (35.5) (35.9) (37.3)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0x88, 0x13, 0x0, 0x0, 0xc4, 0x3b, 0x0, 0x0, 0xa4, 0x38, 0x0, 0x0, 0xe8, 0x35, 0x0, 0x0, 0x98,
      0x3a, 0x0, 0x0, 0x9c, 0x4a, 0x0, 0x0, 0x20, 0x67, 0x0, 0x0, 0xc8, 0x7d, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0x1c, 0x89, 0x0, 0x0, 0xac, 0x8a, 0x0, 0x0, 0x3c, 0x8c, 0x0, 0x0, 0xb4, 0x91, 0x0,
      0x0,
    ])
  ),
  //[ 40 ]  (15.7) (14.8) (13.8) (15.2) (19.5) (26.9) (32.5) (34.4) (35.5) (35.9) (36.4) (37.9)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0xa0, 0xf, 0x0, 0x0, 0x54, 0x3d, 0x0, 0x0, 0xd0, 0x39, 0x0, 0x0, 0xe8, 0x35, 0x0, 0x0, 0x60,
      0x3b, 0x0, 0x0, 0x2c, 0x4c, 0x0, 0x0, 0x14, 0x69, 0x0, 0x0, 0xf4, 0x7e, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0xac, 0x8a, 0x0, 0x0, 0x3c, 0x8c, 0x0, 0x0, 0x30, 0x8e, 0x0, 0x0, 0xc, 0x94, 0x0,
      0x0,
    ])
  ),
  // [ 30 ]  (16.1) (15.2) (14.4) (15.4) (19.9) (27.4) (32.7) (34.4) (35.9) (36.4) (36.8) (38.5)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0xb8, 0xb, 0x0, 0x0, 0xe4, 0x3e, 0x0, 0x0, 0x60, 0x3b, 0x0, 0x0, 0x40, 0x38, 0x0, 0x0, 0x28,
      0x3c, 0x0, 0x0, 0xbc, 0x4d, 0x0, 0x0, 0x8, 0x6b, 0x0, 0x0, 0xbc, 0x7f, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0x3c, 0x8c, 0x0, 0x0, 0x30, 0x8e, 0x0, 0x0, 0xc0, 0x8f, 0x0, 0x0, 0x64, 0x96, 0x0,
      0x0,
    ])
  ),
  // [ 20 ]  (16.4) (15.5) (15.1) (15.7) (20.4) (27.4) (34.9) (34.4) (36.3) (36.8) (37.3) (39.1)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0xd0, 0x7, 0x0, 0x0, 0x10, 0x40, 0x0, 0x0, 0x8c, 0x3c, 0x0, 0x0, 0xfc, 0x3a, 0x0, 0x0, 0x54,
      0x3d, 0x0, 0x0, 0xb0, 0x4f, 0x0, 0x0, 0x8, 0x6b, 0x0, 0x0, 0x54, 0x88, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0xcc, 0x8d, 0x0, 0x0, 0xc0, 0x8f, 0x0, 0x0, 0xb4, 0x91, 0x0, 0x0, 0xbc, 0x98, 0x0,
      0x0,
    ])
  ),
  // [ 15 ]  (16.6) (15.7) (15.4) (15.8) (20.6) (28.3) (36.0) (34.4) (34.7) (37.0) (37.5) (39.4)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0xdc, 0x5, 0x0, 0x0, 0xd8, 0x40, 0x0, 0x0, 0x54, 0x3d, 0x0, 0x0, 0x28, 0x3c, 0x0, 0x0, 0xb8,
      0x3d, 0x0, 0x0, 0x78, 0x50, 0x0, 0x0, 0x8c, 0x6e, 0x0, 0x0, 0xa0, 0x8c, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0x8c, 0x87, 0x0, 0x0, 0x74, 0xe, 0x0, 0x0, 0x7c, 0x92, 0x0, 0x0, 0xe8, 0x99, 0x0,
      0x0,
    ])
  ),
  // [ 10 ]  (16.8) (16.3) (15.7) (15.9) (20.8) (28.4) (36.0) (34.4) (34.7) (37.2) (37.8) (39.7)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0xe8, 0x3, 0x0, 0x0, 0xa0, 0x41, 0x0, 0x0, 0xac, 0x3f, 0x0, 0x0, 0x54, 0x3d, 0x0, 0x0, 0x1c,
      0x3e, 0x0, 0x0, 0x40, 0x51, 0x0, 0x0, 0xf0, 0x6e, 0x0, 0x0, 0xa0, 0x8c, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0x8c, 0x87, 0x0, 0x0, 0x50, 0x91, 0x0, 0x0, 0xa8, 0x93, 0x0, 0x0, 0x14, 0x9b, 0x0,
      0x0,
    ])
  ),
  // [  5 ]  (17.0) (16.5) (16.0) (16.0) (21.0) (28.5) (36.0) (34.4) (34.7) (37.4) (38.0) (40.0)
  mockUSBCommand(
    2,
    0,
    new Uint8Array([
      0xf4, 0x1, 0x0, 0x0, 0x68, 0x42, 0x0, 0x0, 0x74, 0x40, 0x0, 0x0, 0x80, 0x3e, 0x0, 0x0, 0x80,
      0x3e, 0x0, 0x0, 0x8, 0x52, 0x0, 0x0, 0x54, 0x6f, 0x0, 0x0, 0xa0, 0x8c, 0x0, 0x0, 0x60, 0x86,
      0x0, 0x0, 0x8c, 0x87, 0x0, 0x0, 0x18, 0x92, 0x0, 0x0, 0x70, 0x94, 0x0, 0x0, 0x40, 0x9c, 0x0,
      0x0,
    ])
  ),
];

const commands: Array<IUSBCommand> = [
  mockUSBCommand(1, 2, new Uint8Array([0, 0, 0, 0, 0])),
  ...mockedDTC,
  ...mockedIgnition,
];

export default commands;
